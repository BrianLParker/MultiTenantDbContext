// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace MultiTenantDbContext.Data.Optimizations.TenantContext
{
    public partial class TenantDbContextModel
    {
        partial void Initialize()
        {
            var someData = SomeDataEntityType.Create(this);

            SomeDataEntityType.CreateAnnotations(someData);

            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var someData = FindEntityType("MultiTenantDbContext.Models.SomeData")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            someData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var multiTenantDbContextModelsSomeDataTableBase = new TableBase("MultiTenantDbContext.Models.SomeData", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", multiTenantDbContextModelsSomeDataTableBase);
            multiTenantDbContextModelsSomeDataTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(450)", multiTenantDbContextModelsSomeDataTableBase);
            multiTenantDbContextModelsSomeDataTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("MultiTenantDbContext.Models.SomeData", multiTenantDbContextModelsSomeDataTableBase);
            var multiTenantDbContextModelsSomeDataMappingBase = new TableMappingBase<ColumnMappingBase>(someData, multiTenantDbContextModelsSomeDataTableBase, true);
            multiTenantDbContextModelsSomeDataTableBase.AddTypeMapping(multiTenantDbContextModelsSomeDataMappingBase, false);
            defaultTableMappings.Add(multiTenantDbContextModelsSomeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, someData.FindProperty("Id")!, multiTenantDbContextModelsSomeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, someData.FindProperty("Name")!, multiTenantDbContextModelsSomeDataMappingBase);

            var tableMappings = new List<TableMapping>();
            someData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var someItemsTable = new Table("SomeItems", null, relationalModel);
            var idColumn = new Column("Id", "int", someItemsTable);
            someItemsTable.Columns.Add("Id", idColumn);
            var nameColumn = new Column("Name", "nvarchar(450)", someItemsTable);
            someItemsTable.Columns.Add("Name", nameColumn);
            var pK_SomeItems = new UniqueConstraint("PK_SomeItems", someItemsTable, new[] { idColumn });
            someItemsTable.PrimaryKey = pK_SomeItems;
            var pK_SomeItemsUc = RelationalModel.GetKey(this,
                "MultiTenantDbContext.Models.SomeData",
                new[] { "Id" });
            pK_SomeItems.MappedKeys.Add(pK_SomeItemsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SomeItemsUc).Add(pK_SomeItems);
            someItemsTable.UniqueConstraints.Add("PK_SomeItems", pK_SomeItems);
            relationalModel.Tables.Add(("SomeItems", null), someItemsTable);
            var someItemsTableMapping = new TableMapping(someData, someItemsTable, true);
            someItemsTable.AddTypeMapping(someItemsTableMapping, false);
            tableMappings.Add(someItemsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, someData.FindProperty("Id")!, someItemsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, someData.FindProperty("Name")!, someItemsTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
